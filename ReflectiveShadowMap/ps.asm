//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer PassConstant
// {
//
//   float4x4 g_view;                   // Offset:    0 Size:    64 [unused]
//   float4x4 g_invView;                // Offset:   64 Size:    64 [unused]
//   float4x4 g_proj;                   // Offset:  128 Size:    64 [unused]
//   float4x4 g_invProj;                // Offset:  192 Size:    64 [unused]
//   float4x4 g_lightView;              // Offset:  256 Size:    64 [unused]
//   float4x4 g_invLightView;           // Offset:  320 Size:    64
//   float4x4 g_lightOrtho;             // Offset:  384 Size:    64 [unused]
//   float4x4 g_invLightOrtho;          // Offset:  448 Size:    64 [unused]
//   float3 g_lightFlux;                // Offset:  512 Size:    12
//   float g_zNear;                     // Offset:  524 Size:     4 [unused]
//   float3 g_lightDirection;           // Offset:  528 Size:    12
//   float g_zFar;                      // Offset:  540 Size:     4 [unused]
//   float3 g_lightPos;                 // Offset:  544 Size:    12
//   float g_width;                     // Offset:  556 Size:     4
//   float g_height;                    // Offset:  560 Size:     4
//   float g_timeElapsed;               // Offset:  564 Size:     4 [unused]
//
// }
//
// cbuffer ModelConstant
// {
//
//   float4x4 g_model;                  // Offset:    0 Size:    64 [unused]
//   float4x4 g_invModel;               // Offset:   64 Size:    64 [unused]
//   float3 g_albedo;                   // Offset:  128 Size:    12
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// g_samp                            sampler      NA          NA             s0      1 
// g_normalMap                       texture  float4          2d             t1      1 
// g_fluxMap                         texture  float4          2d             t2      1 
// PassConstant                      cbuffer      NA          NA            cb0      1 
// ModelConstant                     cbuffer      NA          NA            cb1      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   xy          0     NONE   float   xy  
// DEPTH                    0     z         0     NONE   float     z 
// NORMAL                   0   xyz         1     NONE   float   xyz 
// POSITION                 0   xyz         2     NONE   float   xyz 
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed | skipOptimization
dcl_constantbuffer CB0[36], immediateIndexed
dcl_constantbuffer CB1[9], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v0.xy
dcl_input_ps linear v0.z
dcl_input_ps linear v1.xyz
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 9
//
// Initial variable locations:
//   v0.x <- uv.x; v0.y <- uv.y; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; 
//   v0.z <- depth; 
//   v2.x <- shadingPoint.x; v2.y <- shadingPoint.y; v2.z <- shadingPoint.z; 
//   o0.x <- <main return value>.x; o0.y <- <main return value>.y; o0.z <- <main return value>.z; o0.w <- <main return value>.w
//
#line 35 "D:\Project\VisualStudio\PaperDemos\ReflectiveShadowMap\test.hlsl"
mov r0.xyz, -cb0[33].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx  // r0.x <- l.x; r0.y <- l.y; r0.z <- l.z

#line 36
dp3 r0.w, v1.xyzx, v1.xyzx
rsq r0.w, r0.w
mul r1.xyz, r0.wwww, v1.xyzx  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 38
mul r2.xyz, cb0[32].xyzx, cb1[8].xyzx
dp3 r0.x, r0.xyzx, r1.xyzx
mul r0.xyz, r0.xxxx, r2.xyzx  // r0.x <- direct.x; r0.y <- direct.y; r0.z <- direct.z

#line 40
mov r1.xyz, l(0,0,0,0)  // r1.x <- indirect.x; r1.y <- indirect.y; r1.z <- indirect.z

#line 42
mul r0.w, v0.x, cb0[34].w
round_ni r0.w, r0.w
ftoi r0.w, r0.w  // r0.w <- px

#line 43
mul r1.w, v0.y, cb0[35].x
round_ni r1.w, r1.w
ftoi r1.w, r1.w  // r1.w <- py

#line 45
mov r2.x, l(2)  // r2.x <- sampleRange

#line 46
ineg r2.y, r2.x  // r2.y <- di
mov r3.xyz, r1.xyzx  // r3.x <- indirect.x; r3.y <- indirect.y; r3.z <- indirect.z
mov r2.z, r2.y  // r2.z <- di
loop 
  ilt r2.w, r2.z, r2.x
  breakc_z r2.w

#line 47
  ineg r2.w, r2.x  // r2.w <- dj
  mov r4.xyz, r3.xyzx  // r4.x <- indirect.x; r4.y <- indirect.y; r4.z <- indirect.z
  mov r3.w, r2.w  // r3.w <- dj
  loop 
    ilt r4.w, r3.w, r2.x
    breakc_z r4.w

#line 48
    iadd r4.w, r0.w, r2.z  // r4.w <- qx

#line 49
    iadd r5.x, r1.w, r3.w  // r5.x <- qy

#line 51
    ilt r5.y, r4.w, l(0)
    ftoi r5.z, cb0[34].w
    ilt r5.z, r5.z, r4.w
    or r5.y, r5.z, r5.y
    if_nz r5.y

#line 52
      iadd r3.w, r3.w, l(1)
      continue 
    endif 

#line 53
    ilt r5.y, r5.x, l(0)
    ftoi r5.z, cb0[35].x
    ilt r5.z, r5.z, r5.x
    or r5.y, r5.z, r5.y
    if_nz r5.y

#line 54
      iadd r3.w, r3.w, l(1)
      continue 
    endif 

#line 56
    itof r4.w, r4.w
    add r4.w, r4.w, l(0.500000)
    div r6.x, r4.w, cb0[34].w  // r6.x <- qu

#line 57
    itof r4.w, r5.x
    add r4.w, r4.w, l(0.500000)
    div r6.w, r4.w, cb0[35].x  // r6.w <- qv

#line 58
    sample_indexable(texture2d)(float,float,float,float) r5.xyz, r6.xwxx, t1.xyzw, s0
    mov r5.xyz, r5.xyzx  // r5.x <- lightNormal.x; r5.y <- lightNormal.y; r5.z <- lightNormal.z

#line 61
    mov r7.x, cb0[34].w
    mov r7.y, cb0[35].x
    mov r7.z, l(0)
    mul r7.xyz, r7.xyzx, l(0.500000, 0.500000, 0.000000, 0.000000)  // r7.x <- centerOnPlane.x; r7.y <- centerOnPlane.y; r7.z <- centerOnPlane.z

#line 62
    mov r4.w, -r6.w
    add r6.y, r4.w, l(1.000000)
    mov r6.z, l(0)
    mov r6.xyz, r6.xyzx  // r6.x <- pixelOnPlane.x; r6.y <- pixelOnPlane.y; r6.z <- pixelOnPlane.z

#line 63
    mov r7.xyz, -r7.xyzx
    add r7.xyz, r6.xyzx, r7.xyzx  // r7.x <- planeOffset.x; r7.y <- planeOffset.y; r7.z <- planeOffset.z

#line 64
    mov r8.x, l(0)
    mov r8.z, v0.z
    add r7.xyz, r7.xyzx, r8.xxzx  // r7.x <- posOffsetInView.x; r7.y <- posOffsetInView.y; r7.z <- posOffsetInView.z

#line 65
    mul r8.xyz, r7.xxxx, cb0[20].xyzx
    mul r7.xyw, r7.yyyy, cb0[21].xyxz
    add r7.xyw, r7.xyxw, r8.xyxz
    mul r8.xyz, r7.zzzz, cb0[22].xyzx
    add r7.xyz, r7.xywx, r8.xyzx
    mul r8.xyz, cb0[23].xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)
    add r7.xyz, r7.xyzx, r8.xyzx  // r7.x <- posOffsetInWorld.x; r7.y <- posOffsetInWorld.y; r7.z <- posOffsetInWorld.z

#line 66
    add r7.xyz, r7.xyzx, cb0[34].xyzx  // r7.x <- indirectLightWorldPos.x; r7.y <- indirectLightWorldPos.y; r7.z <- indirectLightWorldPos.z

#line 68
    mov r8.xyz, -r7.xyzx
    add r8.xyz, r8.xyzx, v2.xyzx
    dp3 r4.w, r8.xyzx, r8.xyzx
    sqrt r4.w, r4.w
    max r4.w, r4.w, l(0.100000)  // r4.w <- dist

#line 69
    mov r7.xyz, -r7.xyzx
    add r7.xyz, r7.xyzx, v2.xyzx  // r7.x <- dirOut.x; r7.y <- dirOut.y; r7.z <- dirOut.z

#line 70
    mov r8.xyz, -r7.xyzx  // r8.x <- dirIn.x; r8.y <- dirIn.y; r8.z <- dirIn.z

#line 71
    dp3 r5.x, r5.xyzx, r7.xyzx
    max r5.x, r5.x, l(0.000000)  // r5.x <- cosLight

#line 72
    dp3 r5.y, v1.xyzx, r8.xyzx
    max r5.y, r5.y, l(0.000000)  // r5.y <- cosShadingPoint

#line 73
    sample_indexable(texture2d)(float,float,float,float) r6.xyz, r6.xwxx, t2.xyzw, s0
    mov r6.xyz, r6.xyzx  // r6.x <- lightFlux.x; r6.y <- lightFlux.y; r6.z <- lightFlux.z

#line 75
    mul r5.x, r5.y, r5.x
    mov r5.y, l(1.000000)
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, r4.w
    mul r4.w, r4.w, r5.y
    div r4.w, r5.x, r4.w
    mul r4.xyz, r4.wwww, r6.xyzx  // r4.x <- contribution.x; r4.y <- contribution.y; r4.z <- contribution.z

#line 76
    mov r4.xyz, r4.xyzx  // r4.x <- indirect.x; r4.y <- indirect.y; r4.z <- indirect.z

#line 47
    iadd r3.w, r3.w, l(1)

#line 77
  endloop 
  mov r3.xyz, r4.xyzx  // r3.x <- indirect.x; r3.y <- indirect.y; r3.z <- indirect.z

#line 78
  iadd r2.z, r2.z, l(1)
endloop 

#line 80
add r0.xyz, r0.xyzx, r3.xyzx  // r0.x <- finalColor.x; r0.y <- finalColor.y; r0.z <- finalColor.z

#line 82
mov o0.xyz, r0.xyzx
mov o0.w, l(1.000000)
ret 
// Approximately 108 instruction slots used
